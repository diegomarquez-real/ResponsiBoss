@layout LoginLayout
@page "/Login"
@inject NavigationManager navigationManager
@inject CustomStorage customStorage
@inject IApplicationSignInManager applicationSignInManager
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using FluentValidation;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using ResponsiBoss.Api.Models;
@using ResponsiBoss.BlazorServerApp.Identity.Abstractions;
@using ResponsiBoss.BlazorServerApp.Identity.Providers;
@using ResponsiBoss.BlazorServerApp.Identity;

<MudGrid>
    <MudItem xs="1" sm="2" md="3" lg="4" xl="4" xxl="5"></MudItem>
    <MudItem xs="10" sm="8" md="6" lg="4" xl="4" xxl="2">
            <MudPaper Class="pa-4">
                <MudForm Model="userLoginModel" @ref="form" Validation="new LoginValidation().ValidateValue">
                    <MudText Color="@Color.Error">@validationSummary</MudText>

                    <MudTextField T="string" Label="Email" @bind-Value="userLoginModel.Email"
                                    For="@(() => userLoginModel.Email)"
                                    Immediate="true" />
                    <MudTextField T="string" Label="Password" @bind-Value="userLoginModel.Password"
                                    For="@(() => userLoginModel.Password)"
                                    Immediate="true"
                                    InputType="InputType.Password" />
                    <div class="d-flex align-center justify-content-center mt-3">
                        <MudButton Variant="Variant.Filled" Class="me-2" Color="Color.Primary" DisableElevation="true" OnClick="LoginAsync">Login</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Validate())">Register</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
    <MudItem xs="1" sm="2" md="3" lg="4" xl="4" xxl="5"></MudItem>
</MudGrid>

@code {
    MudForm form;
    UserLoginModel userLoginModel = new ();
    string validationSummary = String.Empty;

    private async Task LoginAsync()
    {
        await form.Validate();

        if(form.IsValid)
        {
            var result = await applicationSignInManager.SignInResultAsync(userLoginModel.Email, userLoginModel.Password);

            var userSession = new UserSession() { Email = userLoginModel.Email, Password = userLoginModel.Password };

            var userSessionId = Guid.NewGuid();

            customStorage.UserSession.SaveItemEncrypted(userSessionId, userSession);

            if(result.IsSuccess)
            {
                StateHasChanged();

                navigationManager.NavigateTo($"User/Login?key={userSessionId}", true);
            }
        }
    }

    public class LoginValidation : AbstractValidator<UserLoginModel>
    {
        public LoginValidation()
        {
            RuleFor(x => x.Email)
            .NotEmpty()
            .NotNull();

            RuleFor(x => x.Password)
            .NotEmpty()
            .NotNull();
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, properyName) =>
        {
            var result = await ValidateAsync(ValidationContext<UserLoginModel>.CreateWithOptions((UserLoginModel)model, x => x.IncludeProperties(properyName)));

            if (result.IsValid)
                return Array.Empty<string>();

            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}