@page "/Calendar"
@inject IJSRuntime JS
@using ResponsiBoss.BlazorServerApp.Pages.Calendar

<MudCard Class="mx-5 my-4">
    <MudCardActions>
        <MudIconButton Class="ms-2 me-1" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Class="ms-2 my-1" Icon="@Icons.Material.Filled.ArrowBackIos" Size="Size.Small"></MudIcon>
        </MudIconButton>
        <MudIconButton Class="me-2" Variant="Variant.Filled" Color="Color.Primary">
            <MudIcon Class="mx-1 my-1" Icon="@Icons.Material.Filled.ArrowForwardIos" Size="Size.Small"></MudIcon>
        </MudIconButton>
        <MudButton Class="py-2" Variant="Variant.Filled" Color="Color.Primary"
                   OnClick="OpenDatePickerAsync">
            <MudText>@CurrentDateLabel</MudText>
        </MudButton>
        <MudDatePicker Class="invisible ms-2" PickerVariant="PickerVariant.Inline" TransformOrigin="Origin.BottomCenter" DateFormat="dd/MM/yyyy" Date="CurrentDate"
                       Style="width: 0;"
                       UserAttributes="@(new Dictionary<string, object>() { {"id", "calendar-date-picker"} })"
                       DateChanged="(newDate) => UpdateDateBtn(newDate)">
        </MudDatePicker>
        <MudButtonGroup Class="float-end me-2" OverrideStyles="false">
            @foreach(var cfb in CalendarFormatBtns)
            {
                <MudButton Color="Color.Primary" Variant="@cfb.Varient" OnClick="() => UpdateCalendarFormat(cfb.CalendarFormatType)">@cfb.Name</MudButton>
            }    
        </MudButtonGroup>
    </MudCardActions>
    <MudCardContent>
        @switch (this.CalendarFormatType)
        {
            case CalendarFormatTypeEnum.Month:
                <_Month CurrentDate="@CurrentDate" />
                break;
            case CalendarFormatTypeEnum.Week:

                break;
            case CalendarFormatTypeEnum.Day:

                break;
            default:

                break;
        }
        
    </MudCardContent>
</MudCard>

@code {
    private IJSObjectReference? jsModule;

    public DateTime CurrentDate { get; set; } = DateTime.Now;

    public string CurrentDateLabel { get; set; } = String.Empty;

    public CalendarFormatTypeEnum CalendarFormatType { get; set; } = CalendarFormatTypeEnum.Month;

    public List<CalendarFormatBtnModel> CalendarFormatBtns { get; set; }

    protected override Task OnInitializedAsync()
    {
        this.LoadCalendarFormatBtns();

        this.CurrentDateLabel = this.CurrentDate.ToString("MMMM yyyy");

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Calendar/Index.razor.js");
    }

    private async Task OpenDatePickerAsync()
    {
        await jsModule!.InvokeVoidAsync("OpenCalendarDatePicker");
    }

    private void UpdateDateBtn(DateTime? date)
    {
        if (!date.HasValue)
            return;

        this.CurrentDate = date.Value;

        this.CurrentDateLabel = this.CurrentDate.ToString("MMMM yyyy");
    }

    private void UpdateCalendarFormat(CalendarFormatTypeEnum calendarFormatType)
    {
        if (calendarFormatType == this.CalendarFormatType)
            return;

        this.CalendarFormatType = calendarFormatType;

        this.LoadCalendarFormatBtns();
    }

    private void LoadCalendarFormatBtns()
    {
        this.CalendarFormatBtns = new List<CalendarFormatBtnModel>()
        {
            new CalendarFormatBtnModel() { Name = "Month", CalendarFormatType = CalendarFormatTypeEnum.Month,
                                           Varient = this.CalendarFormatType == CalendarFormatTypeEnum.Month ? Variant.Filled : Variant.Outlined },
            new CalendarFormatBtnModel() { Name = "Week", CalendarFormatType = CalendarFormatTypeEnum.Week,
                                           Varient = this.CalendarFormatType == CalendarFormatTypeEnum.Week ? Variant.Filled : Variant.Outlined },
            new CalendarFormatBtnModel() { Name = "Day", CalendarFormatType = CalendarFormatTypeEnum.Day,
                                           Varient = this.CalendarFormatType == CalendarFormatTypeEnum.Day ? Variant.Filled : Variant.Outlined }
        };
    }

    public class CalendarFormatBtnModel
    {
        public string Name { get; set; }

        public CalendarFormatTypeEnum CalendarFormatType { get; set; }

        public Variant Varient { get; set; }
    }

    public enum CalendarFormatTypeEnum
    {
        Month = 1,
        Week = 2,
        Day = 3
    }
}